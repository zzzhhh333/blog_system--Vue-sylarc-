{"version":3,"file":"only-child.mjs","sources":["../../../../../../packages/components/slot/src/only-child.tsx"],"sourcesContent":["import {\n  Comment,\n  Fragment,\n  Text,\n  cloneVNode,\n  defineComponent,\n  inject,\n  withDirectives,\n} from 'vue'\nimport { NOOP, debugWarn, isObject } from '@element-plus/utils'\nimport {\n  FORWARD_REF_INJECTION_KEY,\n  useForwardRefDirective,\n  useNamespace,\n} from '@element-plus/hooks'\n\nimport type { Ref, VNode } from 'vue'\n\nconst NAME = 'ElOnlyChild'\n\nexport const OnlyChild = defineComponent({\n  name: NAME,\n  setup(_, { slots, attrs }) {\n    const forwardRefInjection = inject(FORWARD_REF_INJECTION_KEY)\n    const forwardRefDirective = useForwardRefDirective(\n      forwardRefInjection?.setForwardRef ?? NOOP\n    )\n    return () => {\n      const defaultSlot = slots.default?.(attrs)\n      if (!defaultSlot) return null\n      const [firstLegitNode, length] = findFirstLegitChild(defaultSlot)\n\n      if (!firstLegitNode) {\n        debugWarn(NAME, 'no valid child node found')\n        return null\n      }\n      if (length > 1) {\n        debugWarn(NAME, 'requires exact only one valid child.')\n      }\n\n      return withDirectives(cloneVNode(firstLegitNode!, attrs), [\n        [forwardRefDirective],\n      ])\n    }\n  },\n})\n\nfunction findFirstLegitChild(\n  node: VNode[] | undefined\n): [VNode | null, number] {\n  if (!node) return [null, 0]\n  const children = node as VNode[]\n  const len = children.filter((c) => c.type !== Comment).length\n\n  for (const child of children) {\n    /**\n     * when user uses h(Fragment, [text]) to render plain string,\n     * this switch case just cannot handle, when the value is primitives\n     * we should just return the wrapped string\n     */\n    if (isObject(child)) {\n      switch (child.type) {\n        case Comment:\n          continue\n        case Text:\n        case 'svg':\n          return [wrapTextContent(child), len]\n        case Fragment:\n          return findFirstLegitChild(child.children as VNode[])\n        default:\n          return [child, len]\n      }\n    }\n    return [wrapTextContent(child), len]\n  }\n  return [null, 0]\n}\n\nfunction wrapTextContent(s: string | VNode) {\n  const ns = useNamespace('only-child')\n  return <span class={ns.e('content')}>{s}</span>\n}\n\nexport type OnlyChildExpose = {\n  forwardRef: Ref<HTMLElement>\n}\n"],"names":["NAME","OnlyChild","defineComponent","name","slots","attrs","forwardRefInjection","inject","FORWARD_REF_INJECTION_KEY","forwardRefDirective","useForwardRefDirective","setForwardRef","NOOP","defaultSlot","debugWarn","findFirstLegitChild","children","len","filter","child","wrapTextContent"],"mappings":";;;;;AAkBA,MAAMA,IAAI,GAAG,aAAb,CAAA;AAEaC,MAAAA,SAAS,GAAGC,eAAe,CAAC;AACvCC,EAAAA,IAAI,EAAEH,IADiC;;IAElC,KAAA;IAAMI,KAAF;AAASC,GAAAA,EAAAA;AAAT,IAAkB,IAAA,EAAA,CAAA;AACzB,IAAA,MAAMC,mBAAmB,GAAGC,MAAM,CAACC,yBAAD,CAAlC,CAAA;IACA,MAAMC,mBAAmB,GAAGC,sBAAsB,CAChDJ,yBAAqBK,IAAAA,IAAAA,GAAiBC,KAAAA,CADU,GAAlD,mBAAA,CAAA,aAAA,KAAA,IAAA,GAAA,EAAA,GAAA,IAAA,CAAA,CAAA;AAGA,IAAA,OAAO,MAAM;AACX,MAAA,IAAA;AACA,MAAA,MAAKC,WAAa,GAAA,CAAA,GAAA,GAAA,KAAA,CAAA,OAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,GAAA,CAAA,IAAA,CAAA,KAAA,EAAA,KAAA,CAAA,CAAA;MAClB,IAAM,CAAA;;MAEN,qBAAqB,EAAA,MAAA,CAAA,GAAA,mBAAA,CAAA,WAAA,CAAA,CAAA;AACnBC,MAAAA,IAAAA,CAAAA,cAAgB,EAAA;AAEjB,QAAA,OAAA,IAAA,CAAA;;;AAKD,KAAA,CAAA;;AAIH,CAAA,EAAA;;AAxBsC,EAAlC,IAAA,CAAA,IAAA;;AA2BP,EAASC,MAAAA,QAAAA,GAAAA,IAAAA,CAAAA;EAGP,SAAA,GAAW,QAAO,CAAA,MAAP,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,KAAA,OAAA,CAAA,CAAA,MAAA,CAAA;EACX,KAAMC,MAAAA,SAAN,QAAA,EAAA;AACA,IAAA,IAAMC,QAAc,CAAA,KAAA,CAACC;;AAErB,QAAWC,KAAAA,OAASH;AAClB,UAAA,SAAA;AACJ,QAAA,KAAA,IAAA,CAAA;AACA,QAAA,KAAA,KAAA;AACA,UAAA,OAAA,CAAA,eAAA,CAAA,KAAA,CAAA,EAAA,GAAA,CAAA,CAAA;AACA,QAAA,KAAA,QAAA;AACI,UAAY,OAACG,mBAAQ,CAAA,KAAA,CAAA,QAAA,CAAA,CAAA;QACXA;AACN,UAAA,OAAA,CAAA,KAAA,EAAA,GAAA,CAAA,CAAA;AACE,OAAA;;AACF,IAAA,OAAA,CAAA,eAAA,CAAA,KAAA,CAAA,EAAA,GAAA,CAAA,CAAA;AACA,GAAA;AACE,EAAA,OAAA,CAAA,IAAA,EAAA,CAAO,CAACC,CAAe;;AACzB,SAAA,eAAA,CAAA,CAAA,EAAA;AACE,EAAA,MAAA,EAAA,GAAA,YAA0B,CAAA,YAAM,CAAA,CAAA;;AAClC,IAAA,OAAA,EAAA,EAAA,CAAA,CAAA,CAAA,SAAA,CAAA;AACE,GAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AATJ;;;;"}